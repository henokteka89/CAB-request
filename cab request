CAB Request: Implementation of Parameterized SQL Queries

Requester: 
Date:  

Summary
We propose shifting from direct string SQL queries to parameterized queries across our applications to address CPU and memory pressures, which degrade system performance.
Issue
Non-parameterized SQL queries cause:
•	High CPU utilization due to frequent compilations.
•	Memory pressure from caching multiple plans for similar queries.
Proposal
Mandatory use of parameterized SQL queries for all database interactions.
Update existing queries and enforce through code reviews.
 Benefits
•	Reduced CPU and memory usage.
•	Improved system performance and scalability.
•	Enhanced security against SQL injection.
Impact
Short-term development overhead in updating queries. Long-term benefits include lower operational costs, improved performance, and enhanced security.
Action Requested
Approval to enforce parameterized queries, ensuring better resource management and system reliability. 
Attached are frequently utilized strings by the application that require parameterization or conversion into stored procedures.


CAB Request: Optimizing Database Interactions with Stored Procedures for Select Queries

Requester: SQL Database Administrators
Date: March 5, 2024

Overview:
Our proposal advocates for a strategic enhancement in our database management practices by transitioning frequently executed or critical SQL queries from being embedded within application code to being managed as stored procedures. This initiative aims not only to boost system performance but also to strengthen security measures.

Current Situation:
While not all SQL queries originate from the application layer, a significant number of frequently run or critical queries do. This approach has led to:

Increased CPU load due to repetitive compilations of these common queries.
Elevated memory consumption as a result of caching numerous execution plans.
Proposed Strategic Shift:
We recommend the adoption of stored procedures for managing these frequently executed or critical database interactions. Key advantages include:

Efficient Resource Use: Stored procedures are compiled once, significantly cutting down on CPU utilization by reducing the need for repeated compilations.
Memory Optimization: By centralizing the execution plans of these procedures, we minimize the memory overhead associated with dynamic SQL execution.
Security Enhancement: Transitioning to stored procedures limits direct access to database tables for these queries, encapsulating business logic, and offering finer-grained permission controls. This shift notably diminishes the risk of SQL injection and other security vulnerabilities.
Streamlined Management: Centralizing critical business logic within stored procedures simplifies maintenance, updates, and ensures consistency across applications.
Expected Outcomes:
By focusing on converting frequently executed or critical queries to stored procedures, we anticipate:

A decrease in system resource consumption, leading to improved performance.
A fortified security posture by restricting direct table access and reducing exposure to injection attacks.
Enhanced maintainability and scalability of database operations through centralized control over critical business logic.
Considerations:
This transition will require a focused effort to identify and convert these key queries into stored procedures. It represents a shift in our development practices towards a more database-centric approach to handling business logic and security.

Action Requested:
We seek approval to initiate this targeted transition towards stored procedures for our most frequently executed or critical queries, aligning with our commitment to system efficiency, security, and reliability.

Conclusion:
Implementing stored procedures for selected, high-impact queries stands as a strategic move to optimize database interactions. This method promises significant gains in performance and security, ensuring our database environment is both robust and efficiently managed.
